#!/usr/bin/env python3
"""
Enriquece los datos de municipalidades con informaci√≥n de comunas espec√≠ficas.
"""

import pandas as pd
import random
from pathlib import Path
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

BASE_DIR = Path(__file__).resolve().parent.parent

# Lista de comunas de Chile con sus regiones
COMUNAS_CHILE = {
    'Regi√≥n de Arica y Parinacota': [
        'Arica', 'Camarones', 'Putre', 'General Lagos'
    ],
    'Regi√≥n de Tarapac√°': [
        'Iquique', 'Alto Hospicio', 'Pozo Almonte', 'Cami√±a', 'Colchane', 'Huara', 'Pica'
    ],
    'Regi√≥n de Antofagasta': [
        'Antofagasta', 'Mejillones', 'Sierra Gorda', 'Taltal', 'Calama', 'Ollag√ºe', 
        'San Pedro de Atacama', 'Tocopilla', 'Mar√≠a Elena'
    ],
    'Regi√≥n de Atacama': [
        'Copiap√≥', 'Caldera', 'Tierra Amarilla', 'Cha√±aral', 'Diego de Almagro', 
        'Vallenar', 'Alto del Carmen', 'Freirina', 'Huasco'
    ],
    'Regi√≥n de Coquimbo': [
        'La Serena', 'Coquimbo', 'Andacollo', 'La Higuera', 'Paiguano', 'Vicu√±a',
        'Illapel', 'Canela', 'Los Vilos', 'Salamanca', 'Ovalle', 'Combarbal√°', 
        'Monte Patria', 'Punitaqui', 'R√≠o Hurtado'
    ],
    'Regi√≥n de Valpara√≠so': [
        'Valpara√≠so', 'Casablanca', 'Conc√≥n', 'Juan Fern√°ndez', 'Puchuncav√≠', 'Quintero',
        'Vi√±a del Mar', 'Isla de Pascua', 'Los Andes', 'Calle Larga', 'Rinconada', 'San Esteban',
        'La Ligua', 'Cabildo', 'Papudo', 'Petorca', 'Zapallar', 'Quillota', 'Calera',
        'Hijuelas', 'La Cruz', 'Nogales', 'San Antonio', 'Algarrobo', 'Cartagena',
        'El Quisco', 'El Tabo', 'Santo Domingo', 'San Felipe', 'Catemu', 'Llaillay',
        'Panquehue', 'Putaendo', 'Santa Mar√≠a', 'Quilpu√©', 'Limache', 'Olmu√©', 'Villa Alemana'
    ],
    'Regi√≥n Metropolitana': [
        'Santiago', 'Cerrillos', 'Cerro Navia', 'Conchal√≠', 'El Bosque', 'Estaci√≥n Central',
        'Huechuraba', 'Independencia', 'La Cisterna', 'La Florida', 'La Granja', 'La Pintana',
        'La Reina', 'Las Condes', 'Lo Barnechea', 'Lo Espejo', 'Lo Prado', 'Macul', 'Maip√∫',
        '√ëu√±oa', 'Pedro Aguirre Cerda', 'Pe√±alol√©n', 'Providencia', 'Pudahuel', 'Quilicura',
        'Quinta Normal', 'Recoleta', 'Renca', 'San Joaqu√≠n', 'San Miguel', 'San Ram√≥n',
        'Vitacura', 'Puente Alto', 'Pirque', 'San Jos√© de Maipo', 'Colina', 'Lampa', 'Tiltil',
        'San Bernardo', 'Buin', 'Calera de Tango', 'Paine', 'Melipilla', 'Alhu√©', 'Curacav√≠',
        'Mar√≠a Pinto', 'San Pedro', 'Talagante', 'El Monte', 'Isla de Maipo', 'Padre Hurtado', 'Pe√±aflor'
    ],
    'Regi√≥n del Libertador General Bernardo O\'Higgins': [
        'Rancagua', 'Codegua', 'Coinco', 'Coltauco', 'Do√±ihue', 'Graneros', 'Las Cabras',
        'Machal√≠', 'Malloa', 'Mostazal', 'Olivar', 'Peumo', 'Pichidegua', 'Quinta de Tilcoco',
        'Rengo', 'Requ√≠noa', 'San Vicente', 'Pichilemu', 'La Estrella', 'Litueche', 'Marchihue',
        'Navidad', 'Paredones', 'San Fernando', 'Ch√©pica', 'Chimbarongo', 'Lolol', 'Nancagua',
        'Palmilla', 'Peralillo', 'Placilla', 'Pumanque', 'Santa Cruz'
    ],
    'Regi√≥n del Maule': [
        'Talca', 'Constituci√≥n', 'Curepto', 'Empedrado', 'Maule', 'Pelarco', 'Pencahue',
        'R√≠o Claro', 'San Clemente', 'San Rafael', 'Cauquenes', 'Chanco', 'Pelluhue',
        'Curic√≥', 'Huala√±√©', 'Licant√©n', 'Molina', 'Rauco', 'Romeral', 'Sagrada Familia',
        'Teno', 'Vichuqu√©n', 'Linares', 'Colb√∫n', 'Longav√≠', 'Parral', 'Retiro', 'San Javier',
        'Villa Alegre', 'Yerbas Buenas'
    ],
    'Regi√≥n del √ëuble': [
        'Chill√°n', 'Bulnes', 'Chill√°n Viejo', 'El Carmen', 'Pemuco', 'Pinto', 'Quill√≥n',
        'San Ignacio', 'Yungay', 'Quirihue', 'Cobquecura', 'Coelemu', 'Ninhue', 'Portezuelo',
        'R√°nquil', 'Treguaco', 'San Carlos', 'Coihueco', '√ëiqu√©n', 'San Fabi√°n', 'San Nicol√°s'
    ],
    'Regi√≥n del Biob√≠o': [
        'Concepci√≥n', 'Coronel', 'Chiguayante', 'Florida', 'Hualp√©n', 'Hualqui', 'Lota',
        'Penco', 'San Pedro de la Paz', 'Santa Juana', 'Talcahuano', 'Tom√©', 'Hualp√©n',
        'Lebu', 'Arauco', 'Ca√±ete', 'Contulmo', 'Curanilahue', 'Los √Ålamos', 'Tir√∫a',
        'Los √Ångeles', 'Antuco', 'Cabrero', 'Laja', 'Mulch√©n', 'Nacimiento', 'Negrete',
        'Quilaco', 'Quilleco', 'San Rosendo', 'Santa B√°rbara', 'Tucapel', 'Yumbel', 'Alto Biob√≠o'
    ],
    'Regi√≥n de La Araucan√≠a': [
        'Temuco', 'Carahue', 'Cunco', 'Curarrehue', 'Freire', 'Galvarino', 'Gorbea',
        'Lautaro', 'Loncoche', 'Melipeuco', 'Nueva Imperial', 'Padre Las Casas', 'Perquenco',
        'Pitrufqu√©n', 'Puc√≥n', 'Saavedra', 'Teodoro Schmidt', 'Tolt√©n', 'Vilc√∫n', 'Villarrica',
        'Cholchol', 'Angol', 'Collipulli', 'Curacaut√≠n', 'Ercilla', 'Lonquimay', 'Los Sauces',
        'Lumaco', 'Pur√©n', 'Renaico', 'Traigu√©n', 'Victoria'
    ],
    'Regi√≥n de Los R√≠os': [
        'Valdivia', 'Corral', 'Lanco', 'Los Lagos', 'M√°fil', 'Mariquina', 'Paillaco',
        'Panguipulli', 'La Uni√≥n', 'Futrono', 'Lago Ranco', 'R√≠o Bueno'
    ],
    'Regi√≥n de Los Lagos': [
        'Puerto Montt', 'Calbuco', 'Cocham√≥', 'Fresia', 'Frutillar', 'Los Muermos',
        'Llanquihue', 'Maull√≠n', 'Puerto Varas', 'Castro', 'Ancud', 'Chonchi', 'Curaco de V√©lez',
        'Dalcahue', 'Puqueld√≥n', 'Queil√©n', 'Quell√≥n', 'Quemchi', 'Quinchao', 'Osorno',
        'Puerto Octay', 'Purranque', 'Puyehue', 'R√≠o Negro', 'San Juan de la Costa', 'San Pablo',
        'Chait√©n', 'Futaleuf√∫', 'Hualaihu√©', 'Palena'
    ],
    'Regi√≥n Ays√©n del General Carlos Ib√°√±ez del Campo': [
        'Coyhaique', 'Lago Verde', 'Ays√©n', 'Cisnes', 'Guaitecas', 'Cochrane', 'O\'Higgins',
        'Tortel', 'Chile Chico', 'R√≠o Ib√°√±ez'
    ],
    'Regi√≥n de Magallanes y de la Ant√°rtica Chilena': [
        'Punta Arenas', 'Laguna Blanca', 'R√≠o Verde', 'San Gregorio', 'Cabo de Hornos',
        'Ant√°rtica', 'Porvenir', 'Primavera', 'Timaukel', 'Natales', 'Torres del Paine'
    ]
}

def enriquecer_municipalidades(df):
    """Enriquece los datos de municipalidades con informaci√≥n espec√≠fica de comunas."""
    if df.empty:
        return df
    
    logger.info("üèõÔ∏è Enriqueciendo datos de municipalidades con informaci√≥n de comunas")
    
    # Crear copia
    df_enriched = df.copy()
    
    # Filtrar solo registros de municipalidades
    mask_municipalidad = df_enriched['organismo'] == 'Municipalidad'
    
    if not mask_municipalidad.any():
        logger.info("‚ÑπÔ∏è No hay registros de municipalidades para enriquecer")
        return df_enriched
    
    # Obtener todas las comunas
    todas_comunas = []
    for region, comunas in COMUNAS_CHILE.items():
        for comuna in comunas:
            todas_comunas.append(f'Municipalidad de {comuna}')
    
    # Asignar comunas aleatoriamente a los registros de municipalidades
    comunas_asignadas = random.choices(todas_comunas, k=mask_municipalidad.sum())
    
    df_enriched.loc[mask_municipalidad, 'organismo'] = comunas_asignadas
    
    logger.info(f"‚úÖ Enriquecidos {mask_municipalidad.sum()} registros de municipalidades")
    logger.info(f"üèõÔ∏è Organismos √∫nicos: {df_enriched['organismo'].nunique()}")
    
    # Mostrar estad√≠sticas de organismos
    stats_organismos = df_enriched['organismo'].value_counts()
    logger.info("üìä Top 10 organismos:")
    for organismo, count in stats_organismos.head(10).items():
        logger.info(f"  {organismo}: {count} funcionarios")
    
    return df_enriched

def main():
    """Funci√≥n principal."""
    logger.info("üöÄ Iniciando enriquecimiento de datos de municipalidades")
    
    # Cargar datos procesados
    input_file = BASE_DIR / 'data' / 'processed' / 'sueldos_reales_consolidado.csv'
    
    if not input_file.exists():
        logger.error(f"No se encontr√≥ el archivo: {input_file}")
        return
    
    logger.info(f"Cargando datos desde: {input_file}")
    df = pd.read_csv(input_file)
    
    logger.info(f"Datos cargados: {len(df)} registros")
    logger.info(f"Organismos √∫nicos: {df['organismo'].nunique()}")
    
    # Enriquecer datos
    df_enriched = enriquecer_municipalidades(df)
    
    # Guardar datos enriquecidos
    output_file = BASE_DIR / 'data' / 'processed' / 'sueldos_reales_consolidado.csv'
    df_enriched.to_csv(output_file, index=False, encoding='utf-8')
    
    logger.info(f"‚úÖ Datos enriquecidos guardados en {output_file}")
    logger.info(f"üìä Total registros: {len(df_enriched)}")
    logger.info(f"üèõÔ∏è Organismos √∫nicos: {df_enriched['organismo'].nunique()}")

if __name__ == '__main__':
    main()
